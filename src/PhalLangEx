/*****************************************************
 * Program purpose:                                  *
 * The purpose of this program is to evaluate the    *
 * light level within a room and increase the light- *
 * level if needed.                                  *
 *                                                   *
 * Focus will be on the syntax of the language.      *
******************************************************/

using lightsensorPRS
# The setup method is a default method similar to main, it's used for defining what's in the different ports/pins and such.
#define <method name> with <parameters and types> returntype <type>

setup{
  # The types define whether they are input or output
  # <type> <name> := pin <number>
  lightbulb l := pin 1, 2, 5
  temperatureSensor ls := pin 2
  bool satan := true
  bool god := false
  bool alive := on
  bool dead := off
  number boob := 8008
  list bool bla {
  1=4
  false
  satan
  alive }
  dead := true

  group testgroup{
    l
    ls
  }

  wait 32 seconds

    if(true = false) then{
    dead := on
    }else if(true) then{
    dead := off
    }else then{
    # testgroup := on
    }

    loop 5 times{
      dead := on
      dead := off
    }

    loop 2 times{
      dead := on
      dead := off
    }

        loop 3 times{
          dead := on
          dead := off
        }

    loop until boob > 9000 and dead is off or alive is off increase boob by 500{
        boob -= 200
    }

    loop until boob < 3000 decrease boob by 500{
        boob += 200
    }
}

# The repeat method is a default method, it's used for code that's repeated in each cycle of the hardware. 
repeat{  
  if(true = false and false = false) then {
      if(true = off & 21 > 30) then {
        satan := false
        god := alive
      }
        else if(god = alive) then{
            satan := dead
        }else if(satan = alive) then{
            satan := dead
        }else then{
            alive := false
        }
  }
}

define waitup with(number num) returnType number{
 	number num1
 	number num2
 	num += 45
 	num1 += 45
}

 define waitufp with(number num, number five) returnType number{
 	number num1
 	number num2
 	num += 45
 	num1 += 45

    if(num1 = 4) then {
        num2 := 3
    }
    else if(num < 3) then{
        num := 4
    }else if(five >= 3) then{
        five := 2
    }else then{
        num2 := num1
    }

    wait 2.5 seconds

 	return 15
 }