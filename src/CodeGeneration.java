import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import enums.*;

public class CodeGeneration extends Visitor{

	private PrintWriter writer;
	private List<Type> ComponentIncludesMap;
	
	public CodeGeneration(List<Type> CIM) {
		ComponentIncludesMap = CIM;
		try {
			writer = new PrintWriter(new FileWriter( "../phal/PhalLangEx4/" + MainClass.inputFileName + ".ino", false));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	

	private void printHeader() {
		writer.print("/* Phal AutoGenerated .ino file \n"
				     + "*  Created " + new SimpleDateFormat("dd-MM-yyyy").format(new Date()) 
				     + "\n*/\n\n"
					 );
	}
	private void printCmpIncludes() {
		for(Type t : ComponentIncludesMap) {
			writer.print("#include \"" + t +".h\" \n"
				     );
		}

	}
	
	@Override
	public void visit(ProgramNode node) {
		printHeader();
		printCmpIncludes();

		
		for(SetupCntNode dcl : node.setupNode.setupCntNodes) {
			if(dcl.dclNode instanceof VarDclNode)
				visit(dcl);
		}
		
		// visit includes
		
		visit(node.setupNode);
		visit(node.repeatNode);
		
		writer.close();
	}
	
	@Override
	public void visit(SetupNode node) {
		writer.print("void setup(){ \n");
		// visit setup
		writer.print("} \n\n");
	}
	
	@Override
	public void visit(RepeatNode node) {
		writer.print("void loop(){ \n");
		// visit nodes
		writer.print("} \n\n");
	}
	
	@Override
	public void visit(VarDclNode node) {
		if(node.exprNode == null)
			writer.print(node.typeNode.type + " " + node.idNode.id + "\n;");
		else
			writer.print(node.typeNode.type + " " + node.idNode.id + " = ");
					visit(node.exprNode);
			writer.print(";\n");
	}
	
	@Override
	public void visit(CmpDclNode node) {
		
	}
	
	@Override
	public void visit(LiteralExprNode node) {
		switch(node.literalExprNode) {
		case "on":
		case "true":
			writer.print("true");
			break;
		case "off":
		case "false":
			writer.print("false");
			break;
		default: 
			writer.print(node.literalExprNode);
			break;
		}
	}
}
 